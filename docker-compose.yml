version: '3'

services:
# MARIADB
  db:
    image: mariadb
    command: --transaction-isolation=READ-COMMITTED --binlog-format=ROW
    restart: always
    volumes:
      - db:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=Mysql@2021
    env_file:
      - db.env

  redis:
    image: redis:alpine
    restart: always

# NEXTCLOUD
  nextcloud:
    build: ./nextcloud
    restart: always
    volumes:
      - nextcloud:/var/www/html
    environment:
      - VIRTUAL_HOST=drive.domain.com
      - LETSENCRYPT_HOST=drive.domain.com
      - LETSENCRYPT_EMAIL=contact@domain.com
      - MYSQL_HOST=db
      - REDIS_HOST=redis
    env_file:
      - db.env
    depends_on:
      - db
      - redis
    networks:
      - proxy-tier
      - default

# COLLABORA
  collabora:    
    image: collabora/code
    restart: always
#   ports:
#     - 9980:9980
    environment:
#     - username=admin
#     - password=agoravai@2020
#     - extra_params=--o:ssl.enable=false
      - VIRTUAL_HOST=office.domains.com
      - VIRTUAL_NETWORK=proxy
      - VIRTUAL_PORT=9980
      - VIRTUAL_PROTO=https
      - LETSENCRYPT_HOST=office.domains.com
      - LETSENCRYPT_EMAIL=contato@domains.com
      - dictionaries=pt_BR
      - domain=office.domains.com
    networks:
      - proxy-tier

#CRON
  cron:
    image: nextcloud:apache
    restart: always
    volumes:
      - nextcloud:/var/www/html
    entrypoint: /cron.sh
    depends_on:
      - db
      - redis

# NGNIX HTTP PROXY
  proxy:
    build: ./proxy
    restart: always
    ports:
      - 80:80
      - 443:443
    labels:
      com.github.jrcs.letsencrypt_nginx_proxy_companion.nginx_proxy: "true"
    volumes:
      - certs:/etc/nginx/certs:ro
      - vhost.d:/etc/nginx/vhost.d
      - html:/usr/share/nginx/html
      - /var/run/docker.sock:/tmp/docker.sock:ro
    networks:
      - proxy-tier

# LETSENCRIPT
  letsencrypt-companion:
    build: ./letsencrypt
    restart: always
    volumes:
      - certs:/etc/nginx/certs
      - vhost.d:/etc/nginx/vhost.d
      - html:/usr/share/nginx/html
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - proxy-tier
    depends_on:
      - proxy

# ZABBIX-SERVER
  zbx-server:
    image: zabbix/zabbix-server-mysql:ol-5.0-latest
    restart: always
    ports: 
      - 10051:10051
    environment:
      - DB_SERVER_HOST=db
      - MYSQL_ROOT_PASSWORD=Mysql@2021
      - ZBX_STARTPOLLERS=5
    env_file: 
      - zbx.env
    depends_on: 
      - db
    volumes:
      - '/etc/zabbix/alertscripts:/usr/lib/zabbix/alertscripts'
    links: 
      - db

# ZABBIX-FRONTEND 
  zbx-front: 
    image: zabbix/zabbix-web-apache-mysql:ol-5.0-latest
    restart: always
#   ports:
#     - 8080:8080
#     - 8443:8443
    environment:
      - VIRTUAL_HOST=zabbix.domain.com
      - VIRTUAL_PORT=8080 
      - LETSENCRYPT_HOST=zabbix.domain.com
      - LETSENCRYPT_EMAIL=contact@domain.com
      - DB_SERVER_HOST=db
      - MYSQL_ROOT_PASSWORD=Mysql@2021
      - PHP_TZ=America/Bahia
      - ZBX_SERVER_HOST=zbx-server
      - ZBX_SERVER_NAME=Empresa
    env_file: 
      - zbx.env
    depends_on: 
      - db
    networks:
      - proxy-tier
      - default

# ZABBIX-AGENT
  zbx-agent:
    image: zabbix/zabbix-agent:ol-5.0-latest
    restart: always
    environment: 
      - ZBX_HOSTNAME=zbx-agent-docker
      - ZBX_SERVER_HOST=zbx-server
    depends_on:
      - zbx-server
    volumes: 
      - /etc/zabbix/zabbix_agent.d:/etc/zabbix/zabbix_agentd.d
    networks:
      - default

# GLPI
  glpi:
    image: diouxx/glpi
    hostname: glpi
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - /var/www/html/glpi/:/var/www/html/glpi
    environment:
      - VIRTUAL_HOST=suport.domain.com
      - LETSENCRYPT_HOST=suport.domain.com
      - LETSENCRYPT_EMAIL=contact@domain.com
      - MYSQL_ROOT_PASSWORD=Mysql@2021
      - TIMEZONE=America/Bahia
    restart: always
    env_file: 
      - glpi.env
    networks:
      - proxy-tier
      - default

# GRAYLOG
  mongo:
    image: mongo:4.2
    restart: always
    volumes:
      - /var/docker/graylog/mongo/data:/data/db

  elasticsearch:
    image:  docker.elastic.co/elasticsearch/elasticsearch:7.13.1
    restart: always
    environment:
      - http.host=0.0.0.0
      - transport.host=localhost
      - ES_JAVA_OPTS=-Xms512m -Xmx512m      
      - discovery.type=single-node    
    volumes:
      # sudo mkdir -p /var/docker/graylog/elasticsearch/data
      # chmod 777 /var/docker/graylog/elasticsearch/data
      - /var/docker/graylog/elasticsearch/data:/usr/share/elasticsearch/data  
  
  graylog:
    image: graylog/graylog:4.1    
    restart: always    
    environment:
      - VIRTUAL_HOST=logs.domain.com     
      - VIRTUAL_PORT=9000
      - LETSENCRYPT_HOST=logs.domains.com      
      - LETSENCRYPT_EMAIL=contact@domain.com
      # Pass with 16 digits     
      - GRAYLOG_PASSWORD_SECRET=senha@2021@agoravai
      # Password Admin
      # echo -n password | shasum -a 256
      - GRAYLOG_ROOT_PASSWORD_SHA2=498d052d06f5fc8247d1964bd8257448c1dec61e8304ab6b2f62290beb3eb500      
      - GRAYLOG_HTTP_EXTERNAL_URI=https://logs.ctsnetworks.com.br/
#     - GRAYLOG_WEB_ENDPOINT_URI=http://logs.ctsnetworks.com.br/api    
    entrypoint: /usr/bin/tini -- wait-for-it elasticsearch:9200 --  /docker-entrypoint.sh
    volumes:           
      - graylog:/usr/share/graylog/data/journal
      - /var/docker/graylog/plugin:/usr/share/graylog/plugin    
    ports:      
      - 1514:1514        # SYSLOG TCP
      - 1514:1514/udp    # SYSLOG UDP
      - 12201:12201      # GELF   TCP
      - 12201:12201/udp  # GELP   UDP  
    links:      
      - mongo
      - elasticsearch    
    networks:      
      - proxy-tier
      - default

  grafana:
    image: grafana/grafana
    restart: always
    volumes:
      # sudo mkdir -p /var/docker/grafana/data
      # sudo chown -R 472:472 /var/docker/grafana/data
      # sudo chmod -R 775 /var/docker/grafana
      - /var/docker/grafana/data:/var/lib/grafana
      - ./grafana/provisioning/:/etc/grafana/provisioning/
    environment:
      - VIRTUAL_HOST=grafana.domain.com
      - VIRTUAL_PORT=3000
      - LETSENCRYPT_HOST=grafana.domain.com
      - LETSENCRYPT_EMAIL=contact@domain.com
      - GF_INSTALL_PLUGINS=alexanderzobnin-zabbix-app
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:3000/login || exit 1"]
      interval: 1s
      timeout: 3s
      retries: 30
    networks:
      - proxy-tier
      - default
    labels:
      org.label-schema.group: "monitoring"
### 
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus/:/etc/prometheus/
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    expose:
      - 9090
    labels:
      org.label-schema.group: "monitoring"

  alertmanager:
    image: prom/alertmanager:latest
    container_name: alertmanager
    volumes: 
      - ./alertmanager/:/etc/alertmanager/
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    restart: unless-stopped
    expose:
      - 9093
    labels:
      org.label-schema.group: "monitoring"
    depends_on:
      - grafana

  nodeexporter:
    image: prom/node-exporter:latest
    container_name: nodeexporter
    user: root
    privileged: true
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    expose:
      - 9100
    labels:
      org.label-schema.group: "monitoring"
    depends_on:
      - prometheus

  loki:
    image: grafana/loki
    container_name: loki
    environment:
      - VIRTUAL_HOST=loki.domain.com
      - VIRTUAL_PORT=3100
      - LETSENCRYPT_HOST=loki.domain.com
      - LETSENCRYPT_EMAIL=contact@domain.com
    restart: unless-stopped
    expose:
      - 3100
    ports:
      - "3100:3100"
    labels:
      org.label-schema.group: "monitoring"

  heplify-server:
    image: sipcapture/heplify-server
    container_name: heplify-server
    ports:
      - "9060:9060"
      - "9060:9060/udp"
      - "9061:9061/tcp"
    command:
      - './heplify-server'
    environment:
      - "HEPLIFYSERVER_HEPADDR=0.0.0.0:9060"
      - "HEPLIFYSERVER_HEPTCPADDR=0.0.0.0:9061"
      - "HEPLIFYSERVER_DBSHEMA=homer7"
      - "HEPLIFYSERVER_DBDRIVER=postgres"
      - "HEPLIFYSERVER_DBADDR=db:5432"
      - "HEPLIFYSERVER_DBUSER=root"
      - "HEPLIFYSERVER_DBPASS=homerSeven"
      - "HEPLIFYSERVER_DBDATATABLE=homer_data"
      - "HEPLIFYSERVER_DBCONFTABLE=homer_config"
      - "HEPLIFYSERVER_DBROTATE=true"
      - "HEPLIFYSERVER_DBDROPDAYS=5"
      - "HEPLIFYSERVER_LOGLVL=info"
      - "HEPLIFYSERVER_LOGSTD=true"
      - "HEPLIFYSERVER_PROMADDR=0.0.0.0:9096"
#      - "HEPLIFYSERVER_PROMTARGETIP=127.0.0.1"
#      - "HEPLIFYSERVER_PROMTARGETNAME=local"
      - "HEPLIFYSERVER_DEDUP=false"
      - "HEPLIFYSERVER_LOKIURL=http://loki:3100/api/prom/push"
      - "HEPLIFYSERVER_LOKITIMER=2"
    restart: unless-stopped
    depends_on:
      - loki
      - psql
    expose:
      - 9090
      - 9096
    labels:
      org.label-schema.group: "monitoring"

  homer-webapp:
    container_name: homer-webapp
    image: sipcapture/webapp
    environment:
      - VIRTUAL_HOST=homer.domain.com
      #- VIRTUAL_PORT=80
      - LETSENCRYPT_HOST=homer.domain.com
      - LETSENCRYPT_EMAIL=contact@domain.com
      - "LOKI_HOST=loki"
      - "PROM_HOST=prometheus"
      - "DB_HOST=psql"
      - "DB_USER=root"
      - "DB_PASS=homerSeven"
    restart: unless-stopped
    #ports:
    #  - "9080:80"
    volumes:
      - /etc/timezone:/etc/timezone:ro
      - /etc/localtime:/etc/localtime:ro
      - ./bootstrap:/app/bootstrap
    depends_on:
      psql:
        condition: service_healthy
      grafana:
        condition: service_healthy
  psql:
    container_name: db
    image: postgres:11-alpine
    restart: always
    environment:
      POSTGRES_PASSWORD: homerSeven
      POSTGRES_USER: root
    expose:
      - 5432
    restart: unless-stopped
    volumes:
      - ./init-user-db.sh:/docker-entrypoint-initdb.d/init-user-db.sh
      - ./postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "psql -h 'localhost' -U 'root' -c '\\l'"]
      interval: 1s
      timeout: 3s
      retries: 30
    depends_on:
      - grafana

# VOLUMES 
volumes:
  prometheus_data:
  db:
  nextcloud:
  certs:
  vhost.d:
  html:
  graylog:

networks:
  proxy-tier:
